#!/bin/bash

HASH_TABLE="${XDG_CONFIG_HOME:-${HOME}}/${0##*/}/feeds.tch"
PANDOC_FLAGS="${PANDOC_FLAGS:-"--references-links --smart --normalize"}"

if [ ! -f "$HASH_TABLE" ];
  mkdir -p "$(dirname "$HASH_TABLE")"
  tcamgr create "$HASH_TABLE"
fi

# Echoes a message on stderr
msg() {
  printf "$1\n" "$2" >&2
}

# xml selection command
sel="xml sel -N content=http://purl.org/rss/1.0/modules/content/ \
             -N feedburner=http://rssnamespace.org/feedburner/ext/1.0 \
             -N creativeCommons=http://backend.userland.com/creativeCommonsRssModule \
             -E utf-8 -T "

# Get from hash table
get() {
  tcamgr get ${HASH_TABLE} $1 2>/dev/null
  return $?
}

# Put on hash table
put() {
  tcamgr put ${HASH_TABLE} $1 $2 2>/dev/null
  return $?
}

# Count items
count() {
  c=$($sel -t -v "count(/rss/channel/item)" "$1" || echo 0)
  msg "Counting items: %d" $c

  echo $c
}

# Returns feed name from url
# accepts pipe and $1
feed() {
  if [ -z "$1" ] ; then 
    sed "s/[^a-z0-9]//g" </dev/stdin
  else
    echo "$1" | feed
  fi
}

# Perform cleanups
# Currently converts HTML entities to text and removes feedburner ads
cleanup() {
  sed "/<div class=\"feedflare\">/,/<\/div>/d" </dev/stdin | \
  pandoc -f html -t markdown ${PANDOC_FLAGS}
}

mkdir -p /tmp/feeds
pushd /tmp/feeds >/dev/null

# Download everything
msg "Downloading %d feeds" ${#@}
wget --timestamping --force-directories -nv $@

_feeds=($(find /tmp/feeds -type f))
for _feed in ${_feeds[@]}; do
# Get canonical link
  _url="$($sel -t -m /rss/channel -v link "$_feed")"
  _uri="$(echo "$_url" | feed)"

  _posts=($($sel -t -m /rss/channel/item -v link -n "$_feed"))
  _title="$($sel -t -m /rss/channel -v title -n "$_feed")"
#  _type="$(feed_type "$_feed" "$_uri")"

  msg "%s" "$_title"
  msg "   %s" "$_url"

# If the feed is new, initialize a new thread
  if ! get "${_uri}" >/dev/null 2>&1; then
    msg "Initializing feed..."
    {
    $sel -t -m /rss/channel \
         -o "Subject: " -v title -n \
         -o "Message-Id: <$_uri@$HOSTNAME>" -n -n "$_feed" \
    && \
    $sel -E utf-8 -T -t -m /rss/channel \
         -o "<h1>" -v title -o "</h1>" -n \
         -o "<p>" -v link -o "</p>" -n -n \
         -v description -n -n \
         "$_feed" | cleanup
    } | sendmail -t $USER
  fi

# Traverse all posts
  for _post in ${_posts[@]}; do

    _posturi="$(feed "${_post}")"

# Remove already processed post
    if get ${_posturi} >/dev/null ; then

      msg "Removing already seen: %s" "$_post"
      xml ed -L -d "/rss/channel/item/link[starts-with(text(),'$_post')]/.." "${_feed}"

      continue
    fi

    _posturl="$($sel -t -m "/rss/channel/item/link[starts-with(text(),'$_post')]/.." \
                     --if feedburner:origLink -v feedburner:origLink \
                     --else -v link "$_feed")"
    _license="$($sel -t -m "/rss/channel/item/link[starts-with(text(),'$_post')]/.." \
                     -v creativeCommons:license "$_feed")"

    msg "Sending: %s" "$_posturl"
    {
    $sel -t -m "/rss/channel/item/link[starts-with(text(),'$_post')]/.." \
         -o "Subject: " -v title -n \
         -o "Message-Id: <" -v link -o ">" -n \
         -o "In-Reply-To: <$_uri@$HOSTNAME>" -n -n \
         "$_feed" \
    && \
    $sel -t -m "/rss/channel/item/link[starts-with(text(),'$_post')]/.." \
         -o "<h1>" -v title -o "</h1>" -n \
         -o "<p>URL: $_posturl</p>" -n -n \
         -o "<p>License: $_license</p>" -n -n \
         --if content:encoded -v content:encoded -n -n \
         --else -v description -n -n \
         "${_feed}" | cleanup
    } | sendmail -t $USER
    
# Store
    put "$_posturi" "$(date +%s)"
  done


# Store and/or initialize
  put "$_uri" "$(date +%s)"
done
